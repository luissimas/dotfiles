#+title:Emacs Configuration
#+property: header-args :tangle init.el

This is my Emacs configuration. I'm currently in the process of migrating all the configuration to this document.

* General Settings
** Performance
*** Garbage collector

#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 100 1024 1024))

  (defun pada/display-startup-time ()
    "Display the startup time for the current section."
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook 'pada/display-startup-time)
#+end_src

*** Startup time profile

#+begin_src emacs-lisp
  (defun pada/display-startup-time ()
    "Display the startup time for the current section."
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook 'pada/display-startup-time)
#+end_src

*** Native compilation

#+begin_src emacs-lisp
  ;; Setting the correct native compilation path
  (add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory))

  ;; Supressing native compilation warnings
  (setq native-comp-async-report-warnings-errors nil
        warning-minimum-level :emergency)
#+end_src

** Directories
*** Custom directory
#+begin_src emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (when (file-exists-p (concat user-emacs-directory "custom.el"))
    (load custom-file))
#+end_src

*** Backups and auto-saves
#+begin_src emacs-lisp
  (make-directory (expand-file-name "tmp/auto-saves" user-emacs-directory) t)

  (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions" user-emacs-directory)
        auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves" user-emacs-directory) t))
        backup-directory-alist `(("." . ,(expand-file-name "tmp/backups" user-emacs-directory)))
        create-lockfiles nil)

#+end_src

** Prompts
#+begin_src emacs-lisp
  ;; Stop asking for following git symlink
  (setq vc-follow-symlinks t)

  ;; Prompts and confirmation
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Disable suggestion for keybindings in minibuffer
  (setq suggest-key-bindings nil)

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** Basic UI
#+begin_src emacs-lisp
  ;; Disabling init screen
  (setq inhibit-startup-screen t
        inhibit-startup-message t
        inhibit-startup-echo-area-message t)

  ;; Disabling main UI components
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (tooltip-mode  0)
  (scroll-bar-mode 0)
  (blink-cursor-mode 0)
  (setq visible-bell nil
        use-dialog-box nil)
  (setq-default cursor-in-non-selected-windows nil)

  ;; Emacs "updates" its ui more often than it needs to, so we slow it down
  ;; slightly from 0.5s:
  (setq idle-update-delay 1.0)

  ;; Fringes
  (set-fringe-mode '(5 . 0))
#+end_src

** Cursor
#+begin_src emacs-lisp
  ;; Cursor offset
  (setq scroll-margin 8
        scroll-conservatively 101)

  ;; Remember cursor position
  (save-place-mode 1)
#+end_src

** Spaces and tabs
#+begin_src emacs-lisp
  ;; One space is enough to end a sentence
  (setq sentence-end-double-space nil)

  ;; Spaces over tabs
  (setq standard-indent 2)
  (setq backward-delete-char-untabify-method 'hungry)
  (setq indent-line-function 'insert-tab)
  (setq tab-always-indent nil)
  (setq-default tab-width 2)
  (setq-default indent-tabs-mode nil)
  (setq-default electric-indent-inhibit t)

  ;; Delete trailing whitespace on save
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

** Visual lines
#+begin_src emacs-lisp
  ;; Remove truncation and continuation indicators
  (setq-default fringe-indicator-alist
                (assq-delete-all 'continuation
                                 (assq-delete-all 'truncation fringe-indicator-alist)))

  ;; Enable line numbers and truncate lines only on programming modes
  (add-hook 'prog-mode-hook (lambda ()
                              (setq display-line-numbers 'relative)
                              (toggle-truncate-lines 1)))
#+end_src

** Buffer names
#+begin_src emacs-lisp
  ;; Unique buffer name formats
  (setq uniquify-buffer-name-style 'forward)
#+end_src

** Autopairs
#+begin_src emacs-lisp
  (electric-pair-mode)
#+end_src

** Font
#+begin_src emacs-lisp
  ;; Desktop/Laptop distinction
  (defun pada/is-laptop ()
    "Returns `t' if the current session is running on a laptop with battery, otherwise returns `nil'."
    (file-exists-p "/sys/class/power_supply/BAT1"))

  ;; Font configuration
  (defvar pada/default-font-size (if (pada/is-laptop) 100 100))
  (defvar pada/default-font-family "Iosevka Padawan")

  (defvar pada/variable-font-size (if (pada/is-laptop) 1.1 1.1))
  (defvar pada/variable-font-family "Fira Sans")

  (defun pada/set-fonts ()
    "Set the main font faces."
    (interactive)
    (set-face-attribute 'default nil :font pada/default-font-family :height pada/default-font-size :weight 'normal)
    (set-face-attribute 'fixed-pitch nil :font pada/default-font-family :height 1.0 :weight 'normal)
    (set-face-attribute 'variable-pitch nil :font pada/variable-font-family :height pada/variable-font-size :weight 'light))
#+end_src

** Frame parameters
#+begin_src emacs-lisp
  (defvar pada/frame-parameters
    '((no-special-glyphs t)
      (internal-border-width 0)))

  (setq frame-resize-pixelwise t)

  (defun pada/set-frame-parameters ()
    "Set the parameters defined in `pada/frame-parameters' for the current frame."
    (interactive)
    (dolist (parameter pada/frame-parameters)
      (set-frame-parameter (selected-frame) (car parameter) (car (cdr parameter)))))

  ;; Setting frame options in both daemon (with hooks) or on
  ;; normal emacs startup (directly calling the functions)
  (if (daemonp)
      (progn
        (add-hook 'server-after-make-frame-hook 'pada/set-fonts)
        (add-hook 'server-after-make-frame-hook 'pada/set-frame-parameters))
    (progn
      (pada/set-fonts)
      (pada/set-frame-parameters)))
#+end_src

** System themes
#+begin_src emacs-lisp
  (defun pada/load-theme (theme)
    "Improvement over the default `load-theme'.  Load THEME and disable all themes that were loaded before."
    (interactive
     (list
      (intern (completing-read "Load custom theme: "
                               (mapcar #'symbol-name
                                       (custom-available-themes))))))
    (load-theme theme t)
    (dolist (theme (cdr custom-enabled-themes))
      (disable-theme theme)))

  (defcustom pada/system-theme-associations
    '(("modus-operandi" modus-operandi)
      ("modus-vivendi" modus-vivendi)
      ("nord" doom-nord)
      ("gruvbox" doom-gruvbox)
      ("tokyonight" doom-tokyo-night)
      ("palenight" doom-palenight)
      ("catppuccin" catppuccin))
    "A alist of association between file patterns and external programs."
    :group 'system-theme
    :type "alist")

  (defun pada/load-system-theme ()
    "Read file ~/.colorscheme and load its theme."
    (interactive)
    (with-temp-buffer
      (insert-file-contents "~/.colorscheme")
      (let ((theme (string-trim (buffer-string)))
            (associations pada/system-theme-associations))
        (while associations
          (let* ((current (pop associations))
                 (system-theme (car current))
                 (emacs-theme (car (cdr current))))
            (when (string-match-p system-theme theme)
              (pada/load-theme emacs-theme)
              (setq associations nil)))))))

  ;; Load system theme on startup
  (add-hook 'emacs-startup-hook 'pada/load-system-theme)
#+end_src

** Open files in external programs
#+begin_src emacs-lisp
  (defgroup pada/open-external nil
    "Open files with external commands."
    :group 'files
    :group 'processes)

  (defcustom pada/open-external-associations
    '(("\\.pdf\\'\\|\\.epub\\'\\|\\.djvu\\'" "zathura")
      ("\\.mkv\\'\\|\\.mp4\\'" "mpv"))
    "A alist of association between file patterns and external programs."
    :group 'open-external
    :type "alist")

  (defun pada/run-shell-command (command)
    "Run COMMAND in the default user shell."
    (message command)
    (start-process-shell-command "Open external process" nil (concat "exec nohup " command " >/dev/null")))

  (defun pada/open-external-advice (fun &rest args)
    "Advice FUN with ARGS.
  Try to match filename in ARGS against patterns in `open-external-associations',
  if a pattern matches, then open the file using the specified command.  If no
  pattern matches, simply call FUN with ARGS.
  Note: This function is meant to be adviced around `find-file'."
    (let ((file-name (car args))
          (associations pada/open-external-associations)
          (found nil))
      (while associations
        (let* ((current (pop associations))
               (pattern (car current))
               (program (car (cdr current))))
          (when (string-match-p pattern file-name)
            (pada/run-shell-command (concat program " " (shell-quote-argument file-name)))
            (setq found t)
            (setq associations nil))))
      (unless found
        (apply fun args))))

  (advice-add 'find-file :around 'pada/open-external-advice)
#+end_src

** Better find-file and kill-buffer
#+begin_src emacs-lisp
  ;; Custom function to kill current buffer
  (defun pada/kill-current-buffer ()
    "Kill the current buffer."
    (interactive) (kill-buffer (current-buffer)))

  ;; Custom find-file
  (defun pada/find-file ()
    "Wrapper around `find-file'.  If the current file is in a project, use `project-find-file', otherwise use the built-in `find-file'."
    (interactive)
    (if (project-current)
        (project-find-file)
      (call-interactively 'find-file)))
#+end_src

** Window and buffer management
#+begin_src emacs-lisp
  ;; NOTE: I really need to understand all of this better
  (setq display-buffer-alist
        '(("\\`\\*Calendar\\*\\'"
           (display-buffer-below-selected))
          ("\\*\\(Backtrace\\|Warnings\\|Compile-Log\\|compilation\\|Messages\\|Async Shell Command\\|Python\\|prolog\\|SQL:.*\\)\\*"
           (display-buffer-in-side-window)
           (window-height . 0.3)
           (side . bottom)
           (slot . 0))
          ("\\*\\(lsp-help\\|lsp-documentation\\)\\*"
           (display-buffer-in-side-window)
           (window-height . 0.2)
           (side . bottom))
          ("\\*\\([Hh]elp.*\\|info\\)\\*"
           (display-buffer-in-side-window)
           (window-width . 0.4)
           (side . right)
           (slot . 0))
          ("\\*\\(.*e?shell\\|vterm\\)\\*"
           (display-buffer-in-side-window)
           (window-height . 0.3)
           (side . bottom)
           (slot . -1))
          ("\\*Personal Finance\\*"
           (display-buffer-in-side-window)
           (window-width . 0.4)
           (side . right)
           (slot . 0))))

  (setq frame-auto-hide-function 'delete-frame)

  ;; Always kill the buffer when quitting a window
  (global-set-key [remap quit-window] '(lambda () (interactive) (quit-window t)))
  (global-set-key [remap magit-mode-bury-buffer] '(lambda () (interactive) (magit-mode-bury-buffer t)))
#+end_src

** Compilation
#+begin_src emacs-lisp
  ;; Default compile command
  (setq compile-command "yarn dev")

  ;; Colorize compilation buffers
  (defun pada/colorize-compilation-buffer ()
    "Colorize compilation-buffer using `ansi-color'."
    (when (eq major-mode 'compilation-mode)
      (ansi-color-apply-on-region compilation-filter-start (point-max))))

  (add-hook 'compilation-filter-hook 'pada/colorize-compilation-buffer)
#+end_src

* Straight.el setup
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)

  (setq straight-use-package-by-default t)
#+end_src

* Base packages
** Path
#+begin_src emacs-lisp
  ;; System path
  (use-package exec-path-from-shell
    :config
    (exec-path-from-shell-initialize))

  ;; Making emacs search for binaries in node_modules
  (use-package add-node-modules-path
    :hook
    (js-mode . add-node-modules-path)
    (typescript-mode . add-node-modules-path))
#+end_src

** Keybindings
*** General.el
#+begin_src emacs-lisp
  (use-package general
    :after evil
    :config
    (general-create-definer pada/leader-key
      :states '(normal motion visual)
      :keymaps 'override
      :prefix "SPC")
    ;; Main keybingins, got a lot of inspiration from Doom Emacs (default/+evil-bindings.el)
    (pada/leader-key
      "h" '(:keymap help-map :which-key "Help")
      "w" '(:keymap evil-window-map :which-key "Window")
      "wt" '(window-toggle-side-windows :which-key "Toggle side windows")
      "wo" '(other-window :which-key "Other window")

      "x" '(execute-extended-command :which-key "M-x")
      "u" '(universal-argument :which-key "Universal argument")

      "f" '(:ignore t :which-key "Find")
      "ff" '(pada/find-file :which-key "Find file")
      "fg" '(consult-ripgrep :which-key "Grep")
      "fF" '(find-file :which-key "Find file in CWD")
      "fc" '((lambda () (interactive) (find-file (expand-file-name "README.org" user-emacs-directory))) :which-key "Find config")
      "fC" '(editorconfig-find-current-editorconfig :which-key "Find project editorconfig")
      "fs" '(save-buffer :which-key "Save file")
      "fS" '(write-file :which-key "Save file as...")

      "b" '(:ignore t :which-key "Buffer")
      "bb" '(consult-buffer :which-key "Switch buffer")
      "bk" '(pada/kill-current-buffer :which-key "Kill current buffer")
      "bK" '(kill-buffer :which-key "Kill buffer")
      "bi" '(ibuffer :which-key "Ibuffer")
      "bl" '(evil-switch-to-windows-last-buffer :which-key "Switch to last buffer")
      "bn" '(next-buffer :which-key "Next buffer")
      "bp" '(previous-buffer :which-key "Previous buffer")
      "bN" '(evil-buffer-new :which-key "New buffer")
      "br" '(revert-buffer :which-key "Revert buffer")
      "bc" '(clone-indirect-buffer-other-window :which-key "Clone buffer")

      "g" '(:ignore t :which-key "Git")
      "gs" '(magit-status :which-key "Magit status")
      "gc" '(magit-clone :which-key "Magit clone")
      "gl" '(magit-log-buffer-file :which-key "Magit buffer log")
      "gi" '(magit-init :which-key "Magit init")
      "gb" '(magit-show-commit :which-key "Magit blame line")
      "gB" '(magit-blame :which-key "Magit blame")

      "p" '(:keymap project-prefix-map :which-key "Project")
      ;; "p!" 'project-shell-command
      "pa" 'project-async-shell-command
      "p&" nil

      "t" '(:ignote t :which-key "Toggle")
      "tt" '(pada/load-theme :which-key "Theme")
      "tf" '(flycheck-mode :which-key "Flycheck")
      "tg" '(git-gutter-mode :which-key "Git gutter")
      "tm" '(doom-modeline-mode :which-key "Doom modeline")
      "tr" '(rainbow-mode :which-key "Rainbow"))

    ;; Window resizing
    ;; TODO: Replace it with a hydra
    (general-define-key
     "M-h" 'shrink-window-horizontally
     "M-j" 'shrink-window
     "M-k" 'enlarge-window
     "M-l" 'enlarge-window-horizontally))
#+end_src

#+RESULTS:
: t

*** Evil
#+begin_src emacs-lisp
  (defun pada/evil-lookup-func ()
    "Lookup contex-aware documentation for symbols.
  This function is meant to be used by `evil-lookup'."
    (cond
     ((and (boundp 'lsp-mode) lsp-mode) (lsp-ui-doc-glance))
     ((equal major-mode #'emacs-lisp-mode) (helpful-at-point))
     (t (dictionary-lookup-definition))))

  (use-package evil
    :init
    (setq evil-want-integration t
          evil-want-keybinding nil
          evil-want-C-u-scroll t
          evil-want-minibuffer t
          evil-undo-system 'undo-tree
          evil-want-Y-yank-to-eol t
          evil-shift-width tab-width)
    :custom
    (evil-echo-state . nil)
    (evil-lookup-func 'pada/evil-lookup-func)
    :config
    (unbind-key "C-k" 'evil-insert-state-map)
    (define-key evil-normal-state-map (kbd "H") 'evil-beginning-of-line)
    (define-key evil-normal-state-map (kbd "L") 'evil-end-of-line)
    ;; (define-key evil-insert-state-map (kbd "<tab>") 'tab-to-tab-stop)
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
    (evil-mode 1))

  (use-package evil-surround
    :after evil
    :config
    (global-evil-surround-mode))

  (use-package evil-nerd-commenter
    :after evil
    :config
    (general-define-key :states 'normal "gcc" 'evilnc-comment-or-uncomment-lines)
    (general-define-key :states 'visual "gc" 'evilnc-comment-or-uncomment-lines))

  (use-package evil-org
    :after org
    :hook (org-mode . evil-org-mode)
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))

  (use-package evil-goggles
    :after evil
    :config
    (setq evil-goggles-duration 0.05)
    (evil-goggles-mode))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

** Undo
#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :config
    (setq undo-tree-auto-save-history t
          undo-tree-history-directory-alist `(("." . ,(expand-file-name "undo" user-emacs-directory))))
    (global-undo-tree-mode))
#+end_src

** UI Improvements
*** Which-key
#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-setup-minibuffer)
    (setq which-key-idle-delay 0.5)
    (setq which-key-add-column-padding 5)
    (which-key-mode))
#+end_src

*** Helpful
#+begin_src emacs-lisp
  (use-package helpful
    :config
    (defvar read-symbol-positions-list nil)
    :bind
    ([remap describe-function] . helpful-callable)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key))
#+end_src

* Org-mode
#+begin_src emacs-lisp
  (defun pada/org-mode-setup ()
    "Set options for `org-mode'. This function is meant to be added to `org-mode-hook'."
    (org-indent-mode)
    (variable-pitch-mode)
    (visual-line-mode)
    (setq line-spacing 1)
    (flyspell-mode)
    (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.2))
    (org-latex-preview '(16))
    (general-define-key :states 'normal :keymaps 'org-mode-map "<tab>" 'evil-toggle-fold)
    (setq-local electric-pair-inhibit-predicate
                (lambda (c)
                  (if (char-equal c ?<) t (electric-pair-default-inhibit c)))))

  (use-package org
    :hook
    (org-mode . pada/org-mode-setup)
    :config
    (setq org-hide-emphasis-markers t
          org-pretty-entities t
          org-return-follows-links t
          org-startup-folded t
          org-link-file-path-type 'relative
          org-display-remote-inline-images 'download
          org-startup-with-inline-images t
          org-startup-with-latex-preview nil ; We set the preview in `pada/org-mode-setup', since we can't set the font scale before org starts
          org-cycle-level-faces nil
          org-n-level-faces 4
          org-image-actual-width nil
          org-hidden-keywords '(title)
          org-preview-latex-image-directory (expand-file-name "tmp/ltximg/" user-emacs-directory)
          org-todo-keywords '((sequence "CURRENT(c)" "TODO(t)" "|" "DONE(d)"))
          org-use-fast-todo-selection 'expert
          org-agenda-files '("~/org")
          org-agenda-start-with-log-mode t
          org-log-done 'time
          org-log-into-drawer t
          org-tag-alist '(("work" . ?w) ("school" . ?s))
          org-confirm-babel-evaluate nil)

    (add-to-list 'org-modules 'org-tempo)
    (add-to-list 'org-latex-packages-alist '("" "systeme" t))

    ;; Font scaling for different header levels
    (set-face-attribute 'org-level-8 nil :weight 'semi-bold :inherit 'default)
    (set-face-attribute 'org-level-7 nil :inherit 'org-level-8)
    (set-face-attribute 'org-level-6 nil :inherit 'org-level-8)
    (set-face-attribute 'org-level-5 nil :inherit 'org-level-8)
    (set-face-attribute 'org-level-4 nil :inherit 'org-level-8)
    (set-face-attribute 'org-level-3 nil :inherit 'org-level-8 :height 1.2)
    (set-face-attribute 'org-level-2 nil :inherit 'org-level-8 :height 1.44)
    (set-face-attribute 'org-level-1 nil :inherit 'org-level-8 :height 1.728)
    (set-face-attribute 'org-document-title nil :inherit 'org-level-8 :height 2.074)

    ;; Fonts that should always be in fixed-pitch
    (dolist (face '(org-block
                    org-block-begin-line
                    org-code
                    org-document-info-keyword
                    org-meta-line
                    org-table
                    org-verbatim
                    org-checkbox))
      (set-face-attribute `,face nil :inherit 'fixed-pitch))

    (set-face-attribute 'org-block-end-line nil :inherit 'org-block-begin-line)

    (general-define-key
     :states 'normal
     :keymaps 'org-mode-map
     "M-<tab>" 'org-shifttab
     "C-SPC" 'org-toggle-checkbox)

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)))

    (defun org-babel-edit-prep:python (babel-info)
      (setq-local buffer-file-name (->> babel-info caddr (alist-get :tangle)))
      (lsp))

    (pada/leader-key
      "o" '(:ignore t :which-key "Org")
      "oa" '(org-agenda :which-key "Agenda")
      "ot" '(org-todo :which-key "Toggle todo state")
      "oq" '(org-set-tags-command :which-key "Insert tag")))

  ;; Toggle emphasis markers on cursor
  (use-package org-appear
    :hook (org-mode . org-appear-mode)
    :custom
    (org-appear-autolinks t)
    (org-appear-autokeywords t)
    (org-appear-autoemphasis t)
    (org-appear-autoentities t)
    (org-appear-autosubmarkers t))

  ;; Toggle latex preview on cursor
  (use-package org-fragtog
    :hook (org-mode . org-fragtog-mode))

  (use-package org-superstar
    :hook (org-mode . org-superstar-mode)
    :custom
    (org-superstar-remove-leading-stars t)
    (org-superstar-cycle-headline-bullets nil)
    (org-superstar-headline-bullets-list '("◉" ("🞛" ?◈) "○" "▷"))
    (org-superstar-item-bullet-alist
     '((?* . ?•)
       (?+ . ?➤)
       (?- . ?•)))
    :config
    (set-face-attribute 'org-superstar-item nil :font pada/default-font-family :height 1.2)
    (set-face-attribute 'org-superstar-header-bullet nil :font pada/default-font-family :height 1.2))

  ;; Presentation
  (use-package org-tree-slide)

  ;; Animate inline gifs source: https://ivanaf.com/animating_gifs_in_orgmode.html
  (defun org-inline-image--get-current-image ()
    "Return the overlay associated with the image under point."
    (car (--select (eq (overlay-get it 'org-image-overlay) t) (overlays-at (point)))))

  (defun org-inline-image--get (prop)
    "Return the value of property PROP for image under point."
    (let ((image (org-inline-image--get-current-image)))
      (when image
        (overlay-get image prop))))

  (defun org-inline-image-animate ()
    "Animate the image if it's possible."
    (interactive)
    (let ((image-props (org-inline-image--get 'display)))
      (when (image-multi-frame-p image-props)
        (image-animate image-props))))

  (defun org-inline-image-animate-auto ()
    (interactive)
    (when (eq 'org-mode major-mode)
      (while-no-input
        (run-with-idle-timer 0.3 nil 'org-inline-image-animate))))

  (setq org-inline-image--get-current-image (byte-compile 'org-inline-image--get-current-image))
  (setq org-inline-image-animate  (byte-compile 'org-inline-image-animate ))
  (add-hook 'post-command-hook 'org-inline-image-animate-auto)

  (defun pada/org-start-presentation ()
    "Start a Org presentation."
    (interactive)
    (org-tree-slide-play-with-timer)
    (flyspell-mode 0)
    (text-scale-mode 1))

  (defun pada/org-end-presentation ()
    "End a Org presentation."
    (interactive)
    (text-scale-mode 0)
    (flyspell-mode 1)
    (org-tree-slide-mode 0))

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun pada/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (file-truename (buffer-file-name)))
                        (expand-file-name (file-truename user-emacs-directory)))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (call-interactively 'org-babel-remove-result-one-or-many)
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'pada/org-babel-tangle-config)))
#+end_src

* Development
** Git
*** Magit
#+begin_src emacs-lisp
  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
    :config
    (setf (alist-get 'unpushed magit-section-initial-visibility-alist) 'show)
    (define-key magit-section-mode-map (kbd "<tab>") 'magit-section-toggle)

    ;; Kill magit diff buffer after commit
    (defun pada/kill-magit-diff-buffer ()
      "Kill the magit-diff-buffer for the current repository, This function is meant to be added on `git-commit-setup-hook'."
      (defun kill-magit-diff-buffer ()
        (kill-buffer (magit-get-mode-buffer 'magit-diff-mode)))
      (add-hook 'with-editor-post-finish-hook 'kill-magit-diff-buffer nil t))

    (add-hook 'git-commit-setup-hook 'pada/kill-magit-diff-buffer))
#+end_src

*** Git-gutter
#+begin_src emacs-lisp
  (use-package git-gutter
    :hook (prog-mode . git-gutter-mode)
    :custom
    (git-gutter:update-interval 0.02))

  (use-package git-gutter-fringe
    :after git-gutter
    :custom
    (fringes-outside-margins t)
    :config
    (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))
#+end_src

** Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Colors
#+begin_src emacs-lisp
  (use-package rainbow-mode)
#+end_src

** Tree-sitter
#+begin_src emacs-lisp
  (use-package tree-sitter
    :hook (tree-sitter-after-on . tree-sitter-hl-mode)
    :config
    (global-tree-sitter-mode))

  (use-package tree-sitter-langs)
#+end_src

** Project management
#+begin_src emacs-lisp
  (use-package project
    :config
    (setq project-switch-commands 'project-find-file))
#+end_src

** Formatting
#+begin_src emacs-lisp
  (use-package format-all
    :hook
    (prog-mode . format-all-mode)
    (format-all-mode . format-all-ensure-formatter)
    :config
    (setq format-all-show-errors 'never))
#+end_src

** Editorconfig
#+begin_src emacs-lisp
  (use-package editorconfig
    :config
    (editorconfig-mode))
#+end_src

** Todo comments
#+begin_src emacs-lisp
  (use-package hl-todo
    :hook (prog-mode . hl-todo-mode)
    :config
    (setq hl-todo-highlight-punctuation ":"
          hl-todo-keyword-faces
          `(("TODO"       font-lock-constant-face bold)
            ("WARNING"    warning bold)
            ("FIXME"      error bold)
            ("HACK"       font-lock-constant-face bold)
            ("REVIEW"     font-lock-keyword-face bold)
            ("NOTE"       success bold))))

  (use-package magit-todos
    :config
    (setq magit-todos-branch-list nil)
    :init (magit-todos-mode))
#+end_src

** Terminal
#+begin_src emacs-lisp
  (use-package vterm
    :config
    (general-define-key
     :states 'emacs
     :keymaps 'vterm-mode-map
     "C-c"      #'vterm--self-insert
     "C-d"      #'vterm--self-insert
     "C-SPC"    #'vterm--self-insert))
#+end_src

** LSP
#+begin_src emacs-lisp
  (defun pada/lsp-consult-xref-setup ()
    "Setup xref to use consult functions."
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref))

  (use-package lsp-mode
    :init
    (setq lsp-keymap-prefix "C-c l")
    :hook
    ((js-mode typescript-mode tuareg-mode c-mode python-mode). lsp-deferred)
    (lsp-mode . lsp-enable-which-key-integration)
    (lsp-mode . pada/lsp-consult-xref-setup)
    :config
    (setq read-process-output-max (* 1024 1024)
          lsp-headerline-breadcrumb-enable nil
          lsp-modeline-code-actions-enable t
          lsp-modeline-diagnostics-enable t
          lsp-enable-snippet nil
          lsp-signature-doc-lines 1
          lsp-auto-guess-root t
          lsp-enable-on-type-formatting nil
          lsp-signature-render-documentation t
          lsp-log-io nil
          lsp-restart 'iteractive)
    (general-define-key :states 'normal "gr" 'lsp-find-references)
    (pada/leader-key
      "l" '(:ignore t :which-key "LSP")
      "lf" '(lsp-format-buffer :which-key "Format buffer")
      "la" '(lsp-execute-code-action :which-key "Code actions")
      "lh" '(lsp-describe-thing-at-point :which-key "Describe symbol at point")
      "li" '(lsp-organize-imports :which-key "Organize imports")
      "ld" '(consult-lsp-diagnostics :which-key "Diagnostics")
      "lr" '(lsp-rename :which-key "Rename"))
    ;; Disable creation on ts-server .log files
    (setq lsp-clients-typescript-server-args '("--stdio" "--tsserver-log-file" "/dev/stderr"))
    :commands lsp)

  (use-package lsp-ui
    :commands lsp-ui-mode
    :config
    (setq lsp-ui-doc-enable nil
          lsp-ui-doc-header nil
          lsp-ui-doc-include-signature t
          lsp-ui-doc-delay 0
          lsp-ui-doc-position 'at-point
          lsp-ui-peek-enable nil
          lsp-ui-imenu-enable nil
          lsp-ui-sideline-enable nil))

  (use-package lsp-pyright
    :after lsp-mode)
#+end_src

** Syntax checking
#+begin_src emacs-lisp
  (use-package flycheck
    :hook
    (prog-mode . flycheck-mode)
    (flycheck-mode . flycheck-set-indication-mode)
    :custom
    (flycheck-display-errors-delay 0.6)
    (flycheck-idle-change-delay 0.01)
    (flycheck-check-syntax-automatically '(save idle-buffer-switch  idle-change mode-enabled))
    (flycheck-indication-mode 'left-margin))
#+end_src

** Documentation
#+begin_src emacs-lisp
  (use-package eldoc
    :custom
    (eldoc-echo-area-use-multiline-p nil)
    (eldoc-echo-area-prefer-doc-buffer nil)
    (eldoc-current-idle-delay 0.2))
#+end_src

** Language configuration
*** Typescript
#+begin_src emacs-lisp
  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook
    (typescript-mode-hook . (lambda () (add-hook 'before-save-hook 'lsp-eslint-apply-all-fixes)))
    :custom
    (js-indent-level 2)
    (typescript-indent-level 2))
#+end_src

*** Ocaml
#+begin_src emacs-lisp
  (use-package tuareg)
#+end_src

*** Prolog
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.pl\\'" . prolog-mode))
#+end_src

*** HTML + CSS
#+begin_src emacs-lisp
  (use-package web-mode)
#+end_src

* Completion UI
** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :custom
    (vertico-cycle t)
    :config
    ;; Using vertico-directory extension
    (add-to-list 'load-path (expand-file-name "straight/build/vertico/extensions" user-emacs-directory))
    (require 'vertico-directory)
    (general-define-key
     :states '(normal insert)
     :keymaps 'vertico-map
     "C-j" 'vertico-next
     "C-k" 'vertico-previous
     "RET" 'vertico-directory-enter
     "DEL" 'vertico-directory-delete-char)
    (general-define-key
     :states 'normal
     :keymaps 'vertico-map
     "<escape>" 'abort-minibuffers)
    :init
    (vertico-mode))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))
#+end_src

** Orderless
#+begin_src emacs-lisp
  (defun pada/orderless-literal-dispatcher (pattern _index _total)
    "Literal style dispatcher for strings using the equal sign (`=') as a suffix."
    (when (string-suffix-p "=" pattern) `(orderless-literal . ,(substring pattern 0 -1))))

  (use-package orderless
    :config
    (setq completion-styles '(orderless)
          completion-ignore-case t
          read-file-name-completion-ignore-case t
          read-buffer-completion-ignore-case t
          orderless-matching-styles '(orderless-literal orderless-flex orderless-regexp)
          orderless-style-dispatchers '(pada/orderless-literal-dispatcher)))
#+end_src

** Marginalia
#+begin_src emacs-lisp
  ;; Richer completion annotations
  (use-package all-the-icons-completion
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup))

  (use-package marginalia
    :after vertico
    :bind (:map minibuffer-local-map
                ("M-a" . marginalia-cycle))
    :init
    (marginalia-mode))
#+end_src

** Consult
#+begin_src emacs-lisp
  (use-package consult
    :bind (("C-x b" . consult-buffer)
           ("C-s" . consult-line))
    :config
    (setq consult-narrow-key (kbd "C-.")
          xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref
          consult-project-root-function
          (lambda ()
            (when-let (project (project-current))
              (car (project-roots project))))))

  (use-package consult-lsp
    :after lsp
    :config
    (pada/leader-key
      "ld" '(consult-lsp-diagnostics :which-key "Diagnostics")))
#+end_src

** Embark
#+begin_src emacs-lisp
  (use-package embark
    :bind
    (("C-." . embark-act)
     ("C-;" . embark-dwim)
     ("C-h B" . embark-bindings))
    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  (use-package embark-consult
    :ensure t
    :after (embark consult)
    :demand t
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

  ;; Enable search and replace in embark buffers
  (use-package wgrep)
#+end_src

** At-point completion
#+begin_src emacs-lisp
  (use-package company
    :hook (prog-mode . company-mode)
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)
    (company-tooltip-maximum-width 60)
    (company-tooltip-minimum-width 60)
    (company-tooltip-align-annotations t)
    :config
    ;; Unbinding default insert mappings
    (general-define-key
     :states 'insert
     "C-j" nil
     "C-k" nil)
    (general-define-key
     :states 'insert
     :keymaps 'company-active-map
     "C-j"  'company-select-next
     "C-k"  'company-select-previous)
    (general-define-key
     :states 'insert
     :keymaps 'company-mode-map
     "C-SPC"  'company-complete))

  (use-package company-box
    :custom
    (company-box-scrollbar nil)
    (company-box-doc-enable nil)
    :hook
    (company-mode . company-box-mode))
#+end_src

* UI Enhancements
** Themes
#+begin_src emacs-lisp
  (use-package modus-themes
    :straight nil
    :init
    (setq modus-themes-subtle-line-numbers t
          modus-themes-mode-line nil))

  (use-package nano-theme)

  (use-package doom-themes
    :custom
    (doom-gruvbox-dark-variant "hard"))

  (use-package catppuccin
    :straight '(:host github :repo "pspiagicw/catppuccin-emacs"))
#+end_src

** Icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :custom
    (all-the-icons-scale-factor 1))

  (use-package all-the-icons-dired
    :requires all-the-icons
    :ensure t
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

** Ligatures
#+begin_src emacs-lisp
  (use-package ligature
    :straight '(:host github :repo "mickeynp/ligature.el")
    :config
    ;; Iosevka ligatures
    (ligature-set-ligatures 'prog-mode
                            '("-<<" "-<" "-<-" "<--" "<---" "<<-" "<-" "->" "-->" "--->" "->-" ">-" ">>-"
                              "=<<" "=<" "=<=" "<==" "<===" "<<=" "<=" "=>" "==>" "===>" "=>=" ">=" ">>="
                              "<->" "<-->" "<--->" "<---->" "<=>" "<==>" "<===>" "<====>" "<!--" "<!---"
                              "<~~" "<~" "~>" "~~>" "::" ":::" "==" "!=" "<>" "===" "!=="
                              ":=" ":-" ":+" "<*" "<*>" "*>" "<|" "<|>" "|>" "<." "<.>" ".>" "+:" "-:" "=:" ":>" "__"
                              "(* *)" "[|" "|]" "{|" "|}" "++" "+++" "\\/" "/\\" "|-" "-|" "<!--" "<!---" "<***>"))
    (global-ligature-mode))
#+end_src

** Mode line
#+begin_src emacs-lisp
  ;; (setq evil-mode-line-format '(before . mode-line-front-space))
  (setq mode-line-defining-kbd-macro
        (propertize " Recording macro..." 'face 'mode-line-emphasis))

  (defun pada/replace-vc-string (vc-string)
    "Replace VC-STRING with a simpler and more pleasent representation.
  This function is meant to advise `vc-git-mode-line-string', particularly
  as a `:filter-result' advice."
    (replace-regexp-in-string ".*Git[:-]" "" vc-string))

  (advice-add 'vc-git-mode-line-string :filter-return 'pada/replace-vc-string)

  (setq-default mode-line-format
                `("%e"
                  mode-line-front-space
                  mode-line-mule-info
                  mode-line-modified
                  " "
                  mode-line-buffer-identification
                  "    "
                  mode-line-position
                  "    "
                  (vc-mode vc-mode)
                  "    "
                  mode-line-modes
                  "    "
                  mode-line-misc-info
                  mode-line-end-spaces))

  (use-package minions
    :custom
    (minions-mode-line-lighter "")
    (minions-mode-line-delimiters '("" . ""))
    (minions-prominent-modes '(defining-kbd-macro))
    :init
    (minions-mode))

  ;; Time display format
  (setq display-time-format "%A %d %b, %H:%M")
  (setq display-time-default-load-average nil)

  ;; (use-package doom-modeline
  ;;   :config
  ;;   (setq
  ;;    doom-modeline-height 25
  ;;    doom-modeline-bar-width 2
  ;;    doom-modeline-minor-modes nil
  ;;    doom-modeline-indent-info t
  ;;    doom-modeline-buffer-encoding nil
  ;;    doom-modeline-enable-word-count t
  ;;    doom-modeline-buffer-file-name-style 'relative-to-project)
  ;;   :init
  ;;   (doom-modeline-mode))
#+end_src

** Centralizing buffer contents
#+begin_src emacs-lisp
  (use-package visual-fill-column
    :hook (org-mode . visual-fill-column-mode)
    :custom
    (visual-fill-column-width 60)
    (visual-fill-column-center-text t))
#+end_src

** Font scaling
#+begin_src emacs-lisp
  (setq-default text-scale-mode-amount 3)

  (use-package default-text-scale
    :config
    (setq default-text-scale-amount 10)
    (general-define-key
     :keymaps 'default-text-scale-mode-map
     "C-="  'default-text-scale-increase
     "C--"  'default-text-scale-decrease)
    :init
    (default-text-scale-mode))
#+end_src

** Treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :config
    (setq treemacs-is-never-other-window nil)
    (defvar pada/treemacs-open nil)
    (defun pada/treemacs ()
      (interactive)
      "Custom treemacs toggle function that runs `treemacs-display-current-project-exclusively' instead of simply `treemacs'."
      (if (equal (treemacs-current-visibility) 'visible)
          (treemacs)
        (treemacs-display-current-project-exclusively)))

    (pada/leader-key
      "pt" '(pada/treemacs :which-key "Project tree")))

  (use-package treemacs-evil)

  (use-package treemacs-all-the-icons
    :config
    (treemacs-load-theme "all-the-icons"))

  (use-package lsp-treemacs)
#+end_src

* Spellchecking
#+begin_src emacs-lisp
  (with-eval-after-load "ispell"
    (setq ispell-program-name "hunspell")
    (setq ispell-dictionary "pt_BR,en_US")
    ;; ispell-set-spellchecker-params has to be called
    ;; before ispell-hunspell-add-multi-dic will work
    (ispell-set-spellchecker-params)
    (ispell-hunspell-add-multi-dic "pt_BR,en_US"))

  (use-package flyspell-correct
    :config
    (general-define-key :states 'insert :keymaps 'flyspell-mode-map (kbd "C-;") 'flyspell-correct-wrapper))
#+end_src

* Misc
** MPD Client
#+begin_src emacs-lisp
  (use-package mpdel
    :config
    (defun pada/mpdel-toggle-shuffle ()
      "Toggle mpd shuffle mode."
      (interactive)
      (if libmpdel--random
          (libmpdel-playback-unset-random)
        (libmpdel-playback-set-random)))

    (pada/leader-key
      "m" '(:ignore t :which-key "Mpdel")
      "mp" '(libmpdel-playback-play-pause :which-key "Toggle play")
      "ms" '(pada/mpdel-toggle-shuffle :which-key "Toggle shuffle")
      "mb" '(mpdel-browser-open :which-key "Browse")))
#+end_src

** Markdown
#+begin_src emacs-lisp
  (use-package markdown-mode
    :hook
    (markdown-mode . flyspell-mode)
    :init
    (setq-default markdown-hide-markup t
                  markdown-enable-wiki-links t
                  markdown-enable-math t
                  markdown-wiki-link-alias-first nil
                  markdown-wiki-link-search-subdirectories t
                  markdown-wiki-link-search-parent-directories t
                  markdown-link-space-sub-char " "))

  ;; Display inline latex formulas and images
  (use-package texfrag
    :hook
    (texfrag-mode . texfrag-document)
    (markdown-mode . texfrag-mode)
    (latex-mode . texfrag-mode))
#+end_src

** Accounting
#+begin_src emacs-lisp
  (use-package ledger-mode
    :mode "\\.journal\\'"
    :hook (ledger-mode . flycheck-mode)
    :hook (ledger-mode . company-mode)
    :hook (ledger-mode . (lambda ()
                           (add-hook 'before-save-hook 'ledger-mode-clean-buffer nil 'make-it-local)))
    :config
    (setq ledger-mode-should-check-version nil
          ledger-report-links-in-register nil
          ledger-clear-whole-transactions t
          ledger-post-amount-alignment-column 60
          ledger-binary-path "ledger"))

  (use-package hledger-mode
    :custom
    (hledger-jfile (expand-file-name "~/dox/accounting/accounting.journal"))
    (hledger-reporting-day 1))

  (use-package flycheck-ledger
    :after (flycheck ledger-mode))
#+end_src
